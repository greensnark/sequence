ParserClass = com.zanthan.sequence.parser.SimpleParserImpl com.zanthan.sequence.parser.alternate.AlternateParserImpl

NodeFactory = com.zanthan.sequence.diagram.NodeFactoryImpl com.zanthan.sequence.parser.alternate.AlternateNodeFactoryImpl

DefaultParser = com.zanthan.sequence.parser.alternate.AlternateParserImpl

com.zanthan.sequence.parser.SimpleParserImpl.NodeFactory = com.zanthan.sequence.diagram.NodeFactoryImpl
com.zanthan.sequence.parser.SimpleParserImpl.Name = LISP Style
com.zanthan.sequence.parser.SimpleParserImpl.Description = Uses ( and ) to group calls and returns. Can not handle full\n\
range of sequence diagram notation.

com.zanthan.sequence.parser.alternate.AlternateParserImpl.NodeFactory = com.zanthan.sequence.parser.alternate.AlternateNodeFactoryImpl
com.zanthan.sequence.parser.alternate.AlternateParserImpl.Name = Brace Style
com.zanthan.sequence.parser.alternate.AlternateParserImpl.Description = Uses { and } to delimit message bodies. Style is closer\n\
to Java syntax. Supports wider range of sequence diagram notation.

